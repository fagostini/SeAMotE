static void create_motifs_aa(char **array, char mlen){
	int i, ii, c, cc;
	char pool[] = "ARNDCEQGHILKMFPSTWYV";
	for( i=0; i<mlen; i++ ){
		int step = pow(20, mlen-i-1);
		c = ii = cc = 0;
		do{
			array[c++][i] = pool[ii];
			cc++;
			ii += cc < step ? 0 : 1;
			cc = cc < step ? cc : 0;
			ii = ii == 20 ? 0 : ii;
		}while( c<pow(20, mlen));
	} 	
}

static void filter_and_expand_aa(char **oldSet, float *pcov, float *ncov, int numMot, int newLen, float threshold, char **newSet){
	int i, ii;
	char pool[] = "ARNDCEQGHILKMFPSTWYV-";
	int c = 0;
	for( i=0; i<numMot; i++ ){
		if( pcov[i]>=threshold | ncov[i]>=threshold ){
  		for( ii=0; ii<21; ii++ ){
 				char *motA = (char *)calloc(newLen, sizeof(char));
 				strncpy(motA, oldSet[i], newLen-1);
 				strncat(motA, &pool[ii], 1);
 				char *motB = (char *)calloc(newLen, sizeof(char));
 				strncpy(motB, &pool[ii], 1);
 				strncat(motB, oldSet[i], newLen-1);
 				strncpy(newSet[c++], motA, newLen);
 				strncpy(newSet[c++], motB, newLen);
 				free(motA);
 				free(motB);
 			}
		}  
	}
}